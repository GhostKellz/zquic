/* automatically generated by rust-bindgen 0.70.1 */

pub type WraithProxy = *mut ::std::os::raw::c_void;
pub type CnsResolver = *mut ::std::os::raw::c_void;
pub type DnsMessage = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct WraithConfig {
    pub address: *const ::std::os::raw::c_char,
    pub port: u16,
    pub max_connections: u32,
    pub cert_path: *const ::std::os::raw::c_char,
    pub key_path: *const ::std::os::raw::c_char,
    pub enable_post_quantum: u8,
    pub enable_compression: u8,
    pub cache_size_mb: u32,
    pub health_check_interval_s: u32,
}
impl Default for WraithConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const WraithLoadBalancingAlgorithm_WRAITH_LB_ROUND_ROBIN: WraithLoadBalancingAlgorithm = 0;
pub const WraithLoadBalancingAlgorithm_WRAITH_LB_LEAST_CONNECTIONS: WraithLoadBalancingAlgorithm =
    1;
pub const WraithLoadBalancingAlgorithm_WRAITH_LB_LEAST_RESPONSE_TIME: WraithLoadBalancingAlgorithm =
    2;
pub const WraithLoadBalancingAlgorithm_WRAITH_LB_WEIGHTED_ROUND_ROBIN:
    WraithLoadBalancingAlgorithm = 3;
pub const WraithLoadBalancingAlgorithm_WRAITH_LB_IP_HASH: WraithLoadBalancingAlgorithm = 4;
pub const WraithLoadBalancingAlgorithm_WRAITH_LB_CONSISTENT_HASH: WraithLoadBalancingAlgorithm = 5;
pub type WraithLoadBalancingAlgorithm = ::std::os::raw::c_uint;
pub const WraithBackendHealth_WRAITH_BACKEND_UNKNOWN: WraithBackendHealth = 0;
pub const WraithBackendHealth_WRAITH_BACKEND_HEALTHY: WraithBackendHealth = 1;
pub const WraithBackendHealth_WRAITH_BACKEND_UNHEALTHY: WraithBackendHealth = 2;
pub const WraithBackendHealth_WRAITH_BACKEND_MAINTENANCE: WraithBackendHealth = 3;
pub const WraithBackendHealth_WRAITH_BACKEND_DRAINING: WraithBackendHealth = 4;
pub type WraithBackendHealth = ::std::os::raw::c_uint;
extern "C" {
    pub fn wraith_init(config: *const WraithConfig) -> *mut WraithProxy;
}
extern "C" {
    pub fn wraith_destroy(proxy: *mut WraithProxy);
}
extern "C" {
    pub fn wraith_start(proxy: *mut WraithProxy) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wraith_stop(proxy: *mut WraithProxy) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wraith_add_backend(
        proxy: *mut WraithProxy,
        id: *const ::std::os::raw::c_char,
        address: *const ::std::os::raw::c_char,
        port: u16,
        weight: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wraith_remove_backend(
        proxy: *mut WraithProxy,
        backend_id: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wraith_set_load_balancing(
        proxy: *mut WraithProxy,
        algorithm: WraithLoadBalancingAlgorithm,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, Hash, PartialEq, Eq)]
pub struct WraithStats {
    pub total_requests: u64,
    pub successful_requests: u64,
    pub failed_requests: u64,
    pub cache_hits: u64,
    pub cache_misses: u64,
    pub avg_response_time_us: u64,
    pub healthy_backends: u32,
    pub total_load: u32,
}
extern "C" {
    pub fn wraith_get_stats(
        proxy: *mut WraithProxy,
        stats: *mut WraithStats,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct CnsResolverConfig {
    pub address: *const ::std::os::raw::c_char,
    pub port: u16,
    pub max_connections: u32,
    pub cert_path: *const ::std::os::raw::c_char,
    pub key_path: *const ::std::os::raw::c_char,
    pub enable_post_quantum: u8,
    pub enable_caching: u8,
    pub cache_size_mb: u32,
    pub default_cache_ttl_s: u32,
    pub eth_rpc_endpoint: *const ::std::os::raw::c_char,
    pub ghost_rpc_endpoint: *const ::std::os::raw::c_char,
    pub zns_rpc_endpoint: *const ::std::os::raw::c_char,
}
impl Default for CnsResolverConfig {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const DnsRecordType_DNS_TYPE_A: DnsRecordType = 1;
pub const DnsRecordType_DNS_TYPE_NS: DnsRecordType = 2;
pub const DnsRecordType_DNS_TYPE_CNAME: DnsRecordType = 5;
pub const DnsRecordType_DNS_TYPE_SOA: DnsRecordType = 6;
pub const DnsRecordType_DNS_TYPE_PTR: DnsRecordType = 12;
pub const DnsRecordType_DNS_TYPE_MX: DnsRecordType = 15;
pub const DnsRecordType_DNS_TYPE_TXT: DnsRecordType = 16;
pub const DnsRecordType_DNS_TYPE_AAAA: DnsRecordType = 28;
pub const DnsRecordType_DNS_TYPE_SRV: DnsRecordType = 33;
pub const DnsRecordType_DNS_TYPE_BLOCKCHAIN: DnsRecordType = 65280;
pub const DnsRecordType_DNS_TYPE_IPFS: DnsRecordType = 65281;
pub const DnsRecordType_DNS_TYPE_CONTENT: DnsRecordType = 65282;
pub type DnsRecordType = ::std::os::raw::c_uint;
extern "C" {
    pub fn cns_resolver_init(config: *const CnsResolverConfig) -> *mut CnsResolver;
}
extern "C" {
    pub fn cns_resolver_destroy(resolver: *mut CnsResolver);
}
extern "C" {
    pub fn cns_resolver_start(resolver: *mut CnsResolver) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cns_resolver_stop(resolver: *mut CnsResolver) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct DnsRecord {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: DnsRecordType,
    pub ttl: u32,
    pub data_len: u16,
    pub data: *mut u8,
}
impl Default for DnsRecord {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn cns_resolve_domain(
        resolver: *mut CnsResolver,
        domain: *const ::std::os::raw::c_char,
        type_: DnsRecordType,
    ) -> *mut DnsRecord;
}
extern "C" {
    pub fn cns_record_destroy(record: *mut DnsRecord);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone, PartialEq)]
pub struct CnsResolverStats {
    pub total_queries: u64,
    pub successful_queries: u64,
    pub failed_queries: u64,
    pub cache_hits: u64,
    pub cache_misses: u64,
    pub blockchain_queries: u64,
    pub avg_response_time_us: u64,
    pub uptime_seconds: u64,
    pub cache_hit_rate: f64,
}
extern "C" {
    pub fn cns_resolver_get_stats(
        resolver: *mut CnsResolver,
        stats: *mut CnsResolverStats,
    ) -> ::std::os::raw::c_int;
}
