/* automatically generated by rust-bindgen 0.70.1 */

pub const ED25519_PUBLIC_KEY_SIZE: u32 = 32;
pub const ED25519_PRIVATE_KEY_SIZE: u32 = 32;
pub const ED25519_SIGNATURE_SIZE: u32 = 64;
pub const SECP256K1_PUBLIC_KEY_SIZE: u32 = 33;
pub const SECP256K1_PRIVATE_KEY_SIZE: u32 = 32;
pub const SECP256K1_SIGNATURE_SIZE: u32 = 64;
pub const BLAKE3_HASH_SIZE: u32 = 32;
pub const SHA256_HASH_SIZE: u32 = 32;
pub const ML_KEM_768_PUBLIC_KEY_SIZE: u32 = 1184;
pub const ML_KEM_768_PRIVATE_KEY_SIZE: u32 = 2400;
pub const ML_KEM_768_CIPHERTEXT_SIZE: u32 = 1088;
pub const ML_KEM_768_SHARED_SECRET_SIZE: u32 = 32;
pub const SLH_DSA_128F_PUBLIC_KEY_SIZE: u32 = 32;
pub const SLH_DSA_128F_PRIVATE_KEY_SIZE: u32 = 64;
pub const SLH_DSA_128F_SIGNATURE_SIZE: u32 = 17088;
pub const ZCRYPTO_SUCCESS: u32 = 0;
pub const ZCRYPTO_ERROR_INVALID_INPUT: i32 = -1;
pub const ZCRYPTO_ERROR_INVALID_KEY: i32 = -2;
pub const ZCRYPTO_ERROR_INVALID_SIGNATURE: i32 = -3;
pub const ZCRYPTO_ERROR_BUFFER_TOO_SMALL: i32 = -4;
pub const ZCRYPTO_ERROR_INTERNAL: i32 = -5;
extern "C" {
    pub fn zcrypto_ed25519_keypair(
        public_key: *mut u8,
        private_key: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_ed25519_sign(
        private_key: *const u8,
        message: *const u8,
        message_len: usize,
        signature: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_ed25519_verify(
        public_key: *const u8,
        message: *const u8,
        message_len: usize,
        signature: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_secp256k1_keypair(
        public_key: *mut u8,
        private_key: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_secp256k1_sign(
        private_key: *const u8,
        message_hash: *const u8,
        signature: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_secp256k1_verify(
        public_key: *const u8,
        message_hash: *const u8,
        signature: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_blake3_hash(
        input: *const u8,
        input_len: usize,
        output: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_sha256_hash(
        input: *const u8,
        input_len: usize,
        output: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_ml_kem_768_keypair(
        public_key: *mut u8,
        private_key: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_ml_kem_768_encaps(
        public_key: *const u8,
        ciphertext: *mut u8,
        shared_secret: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_ml_kem_768_decaps(
        private_key: *const u8,
        ciphertext: *const u8,
        shared_secret: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_slh_dsa_128f_keypair(
        public_key: *mut u8,
        private_key: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_slh_dsa_128f_sign(
        private_key: *const u8,
        message: *const u8,
        message_len: usize,
        signature: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_slh_dsa_128f_verify(
        public_key: *const u8,
        message: *const u8,
        message_len: usize,
        signature: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_random_bytes(buffer: *mut u8, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_secure_compare(a: *const u8, b: *const u8, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_secure_zero(buffer: *mut u8, len: usize);
}
extern "C" {
    pub fn zcrypto_multisig_create_context(
        threshold: u32,
        total_signers: u32,
        public_keys: *const u8,
        context_out: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_multisig_add_signature(
        context: *mut u8,
        signer_index: u32,
        signature: *const u8,
        message: *const u8,
        message_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_multisig_verify(
        context: *const u8,
        message: *const u8,
        message_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zcrypto_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zcrypto_last_error() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn zcrypto_test_hash_known_input() -> ::std::os::raw::c_int;
}
